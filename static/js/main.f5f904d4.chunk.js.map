{"version":3,"sources":["logo.svg","components/search_bar.js","components/video_list_item.js","components/video_list.js","components/video_detail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","setState","onSearchTermChange","_this2","react_default","a","createElement","className","placeholder","value","onChange","event","onInputChange","target","Component","VideoListItem","_ref","video","onVideoSelect","imageUrl","snippet","thumbnails","default","url","onClick","src","alt","title","VideoList","videoItems","videos","map","video_list_item","key","etag","VideoDetail","videoId","id","concat","description","App","selectedVideo","videoSearch","YTSearch","_this3","_","debounce","logo","search_bar","video_detail","video_list","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5f904d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass SearchBar extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.state = { term: ''};\n\t}\n\tonInputChange(term) {\n\t\tthis.setState({term});\n\t\tthis.props.onSearchTermChange(term);\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"search-bar\">\n\t\t\t\t<input \n\t\t\t\t\tplaceholder=\"Buscar...\"\n\t\t\t\t\tvalue={this.state.term}\n\t\t\t\t\tonChange={event => this.onInputChange(event.target.value)}/>\n\t\t\t</div>\n\t\t);\n\t};\n};\n\nexport default SearchBar;","import React from 'react';\n\nconst VideoListItem = ({video, onVideoSelect}) => {\n\t//(props) replace for {video}\n\t// const video = props.video;\n\tconst imageUrl = video.snippet.thumbnails.default.url;\n\n\treturn (\n\t\t<li onClick={() => onVideoSelect(video)} className=\"list-group-item\">\n\t\t\t<div className=\"video-list media\">\n\t\t\t\t<div className=\"media-left\">\n\t\t\t\t\t<img className=\"media-object\" src={imageUrl} alt=\"media-img\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"media-body\">\n\t\t\t\t<div className=\"media-heading\">\n\t\t\t\t\t{video.snippet.title}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</li>\n\t);\n};\n\nexport default VideoListItem;","import React from 'react';\nimport VideoListItem from './video_list_item';\n\nconst VideoList = (props) => {\n\tconst videoItems = props.videos.map((video) => {\n\t\treturn (\n\t\t\t<VideoListItem \n\t\t\t\tonVideoSelect={props.onVideoSelect}\n\t\t\t\tkey={video.etag} \n\t\t\t\tvideo={video} />\n\t\t);\n\t});\n\n\treturn (\n\t\t<ul className=\"col-md-5 list-group\">\n\t\t\t{videoItems}\n\t\t</ul>\n\t);\n};\n\nexport default VideoList;","import React from 'react';\n\nconst VideoDetail = ({video}) => {\n\tif(!video) {\n\t\treturn <div>Loading...</div>;\n\t}\n\n\tconst videoId = video.id.videoId;\n\tconst url = `https://www.youtube.com/embed/${videoId}`;\n\t\n\treturn (\n\t\t<div className=\"video-detail col-md-7\">\n\t\t\t<div className=\"embed-responsive embed-responsive-16by9\">\n\t\t\t\t<iframe title=\"youtubeFrame\" className=\"embed-responsive-item\" src={url}></iframe>\n\t\t\t</div>\n\t\t\t<div className=\"details\">\n\t\t\t\t<div>{video.snippet.title}</div>\n\t\t\t\t<div>{video.snippet.description}</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default VideoDetail;","import _ from 'lodash'\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SearchBar from './components/search_bar';\nimport VideoList from './components/video_list';\nimport VideoDetail from './components/video_detail';\nimport YTSearch from 'youtube-api-search';\n\nconst API_KEY = 'AIzaSyD-Tbomtpy5mUaMqvq8yDqFLonMjbHncnM';\n\nclass App extends Component {\n\n    constructor(props){\n\t\tsuper(props);\n\n\t\tthis.state = { \n\t\t\tvideos: [],\n\t\t\tselectedVideo: null,\n\t\t};\n\n\t\tthis.videoSearch('surfboards');\n    }\n    \n\tvideoSearch(term) {\n\t\tYTSearch({key: API_KEY, term: term}, (videos) => {\n\t\t\tthis.setState({ \n\t\t\t\tvideos, \n\t\t\t\tselectedVideo: videos[0] \n\t\t\t});\n\t\t\t//this.setState({ videos: videos });\n\t\t});\n    }\n    \n    render() {\n        const videoSearch = _.debounce((term) => this.videoSearch(term), 300);\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <SearchBar onSearchTermChange={videoSearch}/>\n                    <div className=\"App-container\">\n                        <VideoDetail video={this.state.selectedVideo} />\n                        <VideoList \n                            onVideoSelect={selectedVideo => this.setState({selectedVideo})}\n                            videos={this.state.videos} />\n                    </div>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}